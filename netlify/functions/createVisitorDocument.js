// netlify/functions/createVisitorDocument.js

const { MongoClient, ServerApiVersion } = require('mongodb');
const crypto = require('crypto');

const uri = process.env.MONGODB_ENV_VAR_CAN_YOU_BEAT_THE_MARKET;
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    deprecationErrors: true,
  },
});

// create a new document on each page load.
// (not using a composite key; instead, each document gets its own _id generated by MongoDB.)
// store the visitor's hashed IP in the field "visitorFingerprint".

// function to hash the IP address using SHA-256.
const hashIP = (ip) => {
  const salt = process.env.VISITOR_SALT;
  if (!salt) {
    throw new Error('Missing environment variable: VISITOR_SALT');
  }
  return crypto.createHash('sha256').update(ip + salt).digest('hex');;
};

// function to extract the user's IP from the request headers.
const getUserIP = (event) => {
  const headers = event.headers;
  // use the appropriate header (Netlify usually provides 'x-nf-client-connection-ip' or 'x-real-ip').
  return headers['x-nf-client-connection-ip'] || headers['x-real-ip'] || '0.0.0.0';
};

exports.handler = async (event, context) => {
  // only allow POST requests.
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ message: 'Method Not Allowed' }),
    };
  }
  
  try {
    // connect to MongoDB if not already connected.
    await client.connect();

    // determine the correct database name based on deploy context.
    const defaultDbName =
      process.env.CONTEXT === 'deploy-preview'
        ? 'canyoubeatthemarket-test'
        : 'canyoubeatthemarket';
    const dbName = process.env.MONGODB_DB_NAME || defaultDbName;
    const database = client.db(dbName);
    const visitorsCollection = database.collection('visitors');

    // Get userId from request body if provided
    const payload = event.body ? JSON.parse(event.body) : {};
    const userId = payload.userId || null;

    // get the user's IP and hash it.
    const userIP = getUserIP(event);
    const visitorFingerprint = hashIP(userIP);
    const now = new Date();

    // build the initial document (the "preâ€‘update" data).
    // this document includes all fields that will later be updated after the simulation ends.
    const visitorDoc = {
      visitorFingerprint,    // the hashed IP, to later correlate multiple documents
      visitDate: now,        // the timestamp when the visitor loaded the site
      preDataHaul: false,    // indicating that this is not old/preDataHaul data.
      userId: userId,        // userId if user is logged in, null otherwise
      // pre-update defaults:
      hasStarted: false,         // will be set to true when the user clicks "start simulation"
      durationOfGame: null,      // to be updated later with the game duration
      naturalEnd: null,          // true if the game ended naturally (without a manual stop)
      valid: null,               // true if the game lasted long enough to count for high score
      endGameDate: null,         // timestamp when the game ended (if applicable)
      portfolioValue: null,      // final portfolio value after simulation
      buyHoldFinalValue: null,   // final buy-and-hold portfolio value after simulation
      portfolioCAGR: null,       // user's CAGR (computed from simulation)
      buyHoldCAGR: null,         // buy-and-hold CAGR (computed from simulation)
      buys: 0,                   // number of buy actions (to be tallied)
      sells: 0,                  // number of sell actions (to be tallied)
      realMode: false,         // true if real market data is enabled
      startRealMarketDate: null, // the S&P data starting point (date)
      endRealMarketDate: null    // the S&P data ending point (date)
    };

    // Insert a new document for this page load.
    const insertResult = await visitorsCollection.insertOne(visitorDoc);

    if (insertResult.acknowledged) {
      // return the new document's _id so that the front end can save it for later updates.
      return {
        statusCode: 200,
        body: JSON.stringify({
          message: 'Visitor document created.',
          documentId: insertResult.insertedId,
          visitorFingerprint: visitorFingerprint
        }),
      };
    } else {
      return {
        statusCode: 500,
        body: JSON.stringify({ message: 'Failed to create visitor document.' }),
      };
    }
  } catch (error) {
    console.error('Error in createVisitorDocument function:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({ message: 'Internal Server Error' }),
    };
  }
};